from fastapi import APIRouter, Depends, status, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Annotated, Optional
from fastapi_filter import FilterDepends
from fastapi_pagination import Page, paginate
from redis.asyncio import Redis

from app.schemas import OrderResponse, OrderCreate, AssignEmployee, OrderUpdate, User
from app.utils.filters import OrderFilter, CustomOrderFilter
from app.repositories import OrderRepository
from app.db.db_helper import db_helper
from app.core.config import settings
from app.auth.dependencies import get_current_user, require_client_role, require_admin_role
from app.redis.redis_cache import RedisCache
from app.redis.dependencies import get_redis_client

from app.celery.celery_app import send_email_task


router = APIRouter(
    prefix=settings.api.v1.orders,
    tags=["Order"],
)

order_repository = OrderRepository()

@router.get("/", response_model=Page[OrderResponse], status_code=status.HTTP_200_OK)
async def get_orders(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    user: Annotated[User, Depends(get_current_user)],
    orders_filter: OrderFilter = FilterDepends(OrderFilter),
    custom_order_filter: CustomOrderFilter = Depends()):

    orders = await order_repository.get_all(db, orders_filter, custom_order_filter, user)

    redis_cache = RedisCache(redis_client)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
    orders_with_metadata = []
    for order in orders:
        total_price, total_time = await order_repository.get_cached_price_and_time_for_order(redis_cache, order)
        order_data = OrderResponse.from_orm(order, total_time, total_price)
        orders_with_metadata.append(order_data)

    return paginate([order for order in orders_with_metadata])


@router.post("/", response_model=OrderResponse, status_code=status.HTTP_201_CREATED)
async def create_order(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    user: Annotated[User, Depends(require_client_role)],
    order_in: OrderCreate):

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è)
    order_created = await order_repository.create(db, order_in, user)

    # –†–∞—Å—á–µ—Ç –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
    total_price = sum(service.service.price for service in order_created.order_services) / 100
    total_time = sum(service.service.time for service in order_created.order_services) / 60

    metadata = {
        "total_price": total_price,
        "total_time": total_time,
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö –≤ Redis
    redis_cache = RedisCache(redis_client)
    await redis_cache.set_order_metadata(order_created.id, metadata)

    return OrderResponse.from_orm(order_created, total_time, total_price)


@router.patch("/{order_id}/assign", response_model=OrderResponse, status_code=status.HTTP_200_OK)
async def assign_employee(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    current_user: Annotated[User, Depends(require_admin_role)],
    order_id: int,
    assign_in: AssignEmployee):
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    order, employee, role_employee = await order_repository.get_order_and_employee_with_role(
        db, order_id, assign_in.employee_id
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    updated_order = await order_repository.assign_employee_and_admin(
        db, order, employee.id, current_user.id
    )

    redis_cache = RedisCache(redis_client)
    total_price, total_time = await order_repository.get_cached_price_and_time_for_order(redis_cache, updated_order)

    await order_repository.set_end_date_for_order(db, updated_order, total_time)

    send_email_task.delay(
            email_to=updated_order.customer_car.customer.email,
            subject=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {order.customer_car.customer.first_name}! üëã",
            message_content=f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏–Ω—è—Ç –Ω–∞ –º–æ–π–∫—É, –∏ –º—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. üöóüí¶\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –∞–≤—Ç–æ–º–æ–π–∫—É!"
        )
    
    return OrderResponse.from_orm(updated_order, total_time, total_price)


@router.patch("/{order_id}/services", response_model=OrderResponse, status_code=status.HTTP_200_OK)
async def update_services(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    user: Annotated[User, Depends(require_admin_role)],
    order_id: int,
    assign_in: OrderCreate,
    ):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∫–ª–∏–µ–Ω—Ç–∞
    order = await order_repository.get_order_with_services(db, order_id, user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —É—Å–ª—É–≥–∏
    existing_service_ids = {service.service_id for service in order.order_services}
    new_service_ids = set(assign_in.services_ids)

    if existing_service_ids & new_service_ids:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Duplicate services are not allowed in the order"
        )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥
    order_updated = await order_repository.add_services_to_order(db, order, new_service_ids)

    # –†–∞—Å—á–µ—Ç –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
    total_price = sum(service.service.price for service in order_updated.order_services) / 100
    total_time = sum(service.service.time for service in order_updated.order_services) / 60

    metadata = {
        "total_price": total_price,
        "total_time": total_time,
    }

    redis_cache = RedisCache(redis_client)
    await redis_cache.set_order_metadata(order_updated.id, metadata)

    await order_repository.set_end_date_for_order(db, order_updated, total_time)

    return OrderResponse.from_orm(order_updated, total_time, total_price)


@router.patch("/{order_id}/complete", response_model=OrderResponse, status_code=status.HTTP_200_OK)
async def update_order_to_complete(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[RedisCache, Depends(get_redis_client)],
    user: Annotated[User, Depends(require_admin_role)],
    order_id: int):
    
    order = await order_repository.change_order_status(db, order_id)

    redis_cache = RedisCache(redis_client)
    total_price, total_time = await order_repository.get_cached_price_and_time_for_order(redis_cache, order)

    if order.status == 1:
        send_email_task.delay(
            email_to=order.customer_car.customer.email,
            subject=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {order.customer_car.customer.first_name}! üëã",
            message_content=f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤! ‚úÖ –ú—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ –∏ –∂–¥–µ–º –≤–∞—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–ª—é—á–µ–π. üöó‚ú®\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–æ–π–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏! üòä"
        )

    return OrderResponse.from_orm(order, total_time, total_price)


@router.get("/{order_id}", response_model=OrderResponse, status_code=status.HTTP_200_OK)
async def get_order(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    user: Annotated[User, Depends(get_current_user)],
    order_id: int):

    order = await order_repository.get(db, order_id)

    redis_cache = RedisCache(redis_client)
    total_price, total_time = await order_repository.get_cached_price_and_time_for_order(redis_cache, order)
    
    return OrderResponse.from_orm(order, total_time, total_price)


@router.patch("/{order_id}", response_model=OrderResponse, status_code=status.HTTP_200_OK)
async def update_order(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    user: Annotated[User, Depends(require_admin_role)],
    order_id: int, 
    order_in: OrderUpdate):

    order_updated = await order_repository.update(db, order_id, order_in)

    redis_cache = RedisCache(redis_client)
    total_price, total_time = await order_repository.get_cached_price_and_time_for_order(redis_cache, order_updated)

    return OrderResponse.from_orm(order_updated, total_time, total_price)


@router.delete("/{order_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_order(
    db: Annotated[AsyncSession, Depends(db_helper.session_getter)],
    redis_client: Annotated[Redis, Depends(get_redis_client)],
    user: Annotated[User, Depends(require_admin_role)],
    order_id: int):
    
    redis_cache = RedisCache(redis_client)
    await redis_cache.delete_order_metadata(order_id)

    await order_repository.delete(db, order_id)