from celery import Celery
from celery.schedules import crontab
from app.repositories import OrderRepository
from app.db.db_helper import db_helper
from app.core.config import settings

from aiosmtplib import SMTP
from email.message import EmailMessage


app = Celery(
    "tasks",
    broker="redis://redis:6379/0",
    backend="redis://redis:6379/0",
)

app.conf.update(
    task_serializer="json",
    accept_content=["json"],
    result_serializer="json",
    timezone="UTC",
    enable_utc=True,
)

app.conf.beat_schedule = {
    'check-orders-status-every-hour': {
        'task': 'app.celery.celery_app.check_order_status',
        'schedule': crontab(minute='*/15'),
    },
}


@app.task(bind=True)
def send_email_task(self, email_to: str, subject: str, message_content: str):
    import asyncio

    async def send_email():
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = EmailMessage()
        message["From"] = settings.celery.email_sender
        message["To"] = email_to
        message["Subject"] = subject
        message.set_content(message_content)

        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP
            async with SMTP(hostname=settings.celery.smtp_hostname, port=settings.celery.smtp_port, use_tls=True) as smtp:
                await smtp.login(settings.celery.email_username, settings.celery.email_password)
                await smtp.send_message(message)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email_to}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ {email_to}: {e}")
            raise e

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(send_email())


@app.task
def check_order_status():
    import asyncio  # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    async def process():
        async for db in db_helper.session_getter():
            order_repository = OrderRepository()
            orders = await order_repository.get_orders_to_complete(db)
            for order in orders:
                if order.status == 0:
                    await send_email(
                            order.customer_car.customer.email, 
                            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {order.customer_car.customer.first_name}! üëã",
                            f"–•–æ—Ç–∏–º —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order.id} –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ú—ã –ø—Ä–∏–ª–∞–≥–∞–µ–º –≤—Å–µ —É—Å–∏–ª–∏—è, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üôè"
                        )
                    order.status = 2
            await db.commit()

    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.run_until_complete(process())


async def send_email(email: str, subject: str, body: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = EmailMessage()
    message["From"] = settings.celery.email_sender
    message["To"] = email
    message["Subject"] = subject
    message.set_content(body)

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP
        async with SMTP(hostname=settings.celery.smtp_hostname, port=settings.celery.smtp_port, use_tls=True) as smtp:
            await smtp.login(settings.celery.email_username, settings.celery.email_password)
            await smtp.send_message(message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ {email}: {e}")